/********************************************************
    sorry, if you hae mac or linux, you will have to 
    compile the modl files  yourself 
********************************************************/  
	if(unix_mac_pc() == 3) nrn_load_dll("./nrnlib/_mod/nrnmech.dll")
	load_file("nrngui.hoc")
	load_file("./nrnlib/_classlib/TScalebar.hoc")

/********************************************************
simulation parameters
********************************************************/
    steps_per_ms = 200
	dt = 1/steps_per_ms
	tstop = 1000
    BASE_RANDOM_SEED = 1232
    objref NULL

/********************************************************
    input layer nodes: 
    green light = two nodes "on"
    red light   = one node is "on"
********************************************************/
	Ni = 2 
/********************************************************
    neurons of the recurrent network with connectivity of 
    all to all 
********************************************************/      
	N = 5 

/********************************************************
    First set all the utilities of this simulation 
    i.e., the utility functions:
********************************************************/  
    obfunc append_voltage_clamp(){localobj vc
        vc = new SEClamp(0.5)
        vc.dur1 = tstop
        vc.rs = 1e-3//0.001
        $o1.append(vc)
        return vc
    }

    obfunc append_post_syn(){localobj s
        s = new mySyn(0.5)
        s.gmax = 5e-3 //uS
        s.tau_r = 0.5
        s.tau_d = 10
        s.mg = 0
        s.e = 0		
        $o1.append(s)
        return s
    }
    
    proc append_recurrent_netcon(){local threshold localobj nc, target
        target = $o2
        threshold = 0
        //section netcon = new NetCon(&v(x), target, threshold, delay, weight)
        nc = new NetCon(&v(0.5),target,threshold,2,1e-3)
        $o1.append(nc)
    }
    
    objref global_random_obj

    obfunc get_random_obj(){
        if(global_random_obj == NULL){
            global_random_obj = new Random(BASE_RANDOM_SEED)
            print "Allocating new random object"
        }
        return global_random_obj
    }

    obfunc create_tplay(){local x,i,Hz,delay localobj tplay,rnd
        Hz = $1
        delay = $2
        rnd = get_random_obj()
        //assign four times the nuber of extepcted spike per second to be safe
        tplay = new Vector(Hz * 1000 / tstop/2 ) 
        rnd.negexp(1/Hz * 1000)
        tplay.setrand(rnd)
        tplay.integral().add(delay)
        return tplay
    }

/********************************************************
    Set the biophysical properties of our neuron models
    including the spikes and passive membrane potential
    the input resistance 
********************************************************/  
    proc biophys(){
        celsius = 37
        cm =1
        Ra =100
        Rm = 40
        insert traub
        gNabar_traub = 0.1 
        gKbar_traub = 0.015 
        gLbar_traub =  1/Rm/1000  	
        eL_traub = -74.0 		
        eK_traub = -70			
        eNa_traub = 40	
        v_init = -74	
    }

/********************************************************
    Create the cells and synapses
********************************************************/    
	create neuron[N]
    for i=0,N-1 neuron[i] biophys(i) 

	objref syn_list //each syn list belongs to the post synaptic neuron
   	syn_list = new List() //one synapse on each postsynaptic neuron represents multiple synaptic inputs
    //do the following for every cell in the recurrent layer:
	//for every post synaptic neuron append N synapses
	for i=0,N-1 neuron[i] append_post_syn(syn_list) 
	
/********************************************************
   load connectivity data (there is only one file). Note
   that the connection of the recurrent network is not
   all to all. It is specified as in Oizumi et al., 2014
   Figure 17C. This network has a Î¦ of 10.75 for a
   different cell behavior though. 
********************************************************/   
    //connectivity of the input layer to the recurrent layer
	// the connectivity in the recurrent layer is all to all
	objref input_layer_connectivity_file
	objref input_layer_connectivity_mat
	input_layer_connectivity_mat = new Matrix()
	input_layer_connectivity_file = new File("./dat/input_layer_connectivity.dat")
	input_layer_connectivity_file.ropen()
	input_layer_connectivity_mat.scanf(input_layer_connectivity_file, N, N)
	
	
	objref recurrent_connectivity_file
	objref recurrent_connectivity_mat
	recurrent_connectivity_mat = new Matrix()
	recurrent_connectivity_file = new File("./dat/recurrent_layer_connectivity.dat")
	recurrent_connectivity_file.ropen()
	recurrent_connectivity_mat.scanf(recurrent_connectivity_file, N, N)
	
	
/********************************************************
    Activation time of each stimulation to the input 
    layer. Every input synapse (i.e., the netstim) 
    trigggers a single input or less at the recurrent layer.
********************************************************/  
	objref activity_file
	objref activity_vec
	activity_vec = new Vector()
	activity_file = new File("./dat/input_layer_activity.dat")
	activity_file.ropen()
	activity_vec.scanf(activity_file, N)
		
/********************************************************
    connect the network 
********************************************************/ 
    objref recurrent_connection_list[N] //each bouton list belongs to teh presynaptic inputs neuron
	for i=0,N-1 recurrent_connection_list[i] = new List()
	// connect every ith presynaptic neuron with the synapse on the jth postsynaptic neuron
    // note that there is one synaptic object for the recurrent synapses and one object
    // for the input nodes.
	for i=0,N-1	for j=0,N-1 neuron[i] append_recurrent_netcon(recurrent_connection_list[i],syn_list.o(j))


/********************************************************
    cerate the nodes for the input layer
    input layer create input to all neurons and use
    matrix to set the wieghts
********************************************************/ 
	objref input_node_list[Ni] //one input for each cell.
	objref syn,input_node_activity_vec[Ni][N]
	for i=0, Ni-1{//presynaptic input cell
        input_node_list[i] = new List()
		for j=0, N-1 neuron[j]{//post synaptic cell
            syn = append_post_syn(input_node_list[i])
			input_node_activity_vec[i][j] = create_tplay(100,200)
			syn.play( input_node_activity_vec[i][j] )
		}
	}
/********************************************************
    Set the input nodes activity to the recurrent network
    connections. 
    paraemter is the hue the sensor sees, 
    i.e., green(=1) or red(=2)
********************************************************/ 

    GREEN = 0
    RED = 1
    BLUE = 2
    NOTHING = -1
    func sensor_set_input_layer(){local hue
        hue = $1
        //first make sure that there are no inputs
        for i=0, N-1 input_node_list[0].o(i).remove_play()
        for i=0, N-1 input_node_list[1].o(i).remove_play()
        // now add the channels accordingly
        if(hue == GREEN){ //input nodes on state = 00
            for i=0, N-1 input_node_list[0].o(i).play( input_node_activity_vec[0][i] )
            for i=0, N-1 input_node_list[1].o(i).play( input_node_activity_vec[1][i] )
        }else if(hue == RED){//input nodes on state = 10
            for i=0, N-1 input_node_list[0].o(i).play( input_node_activity_vec[0][i] )
        }else if(hue == BLUE){//input nodes on state = 01
            for i=0, N-1 input_node_list[0].o(i).play( input_node_activity_vec[1][i] )
        }
        return hue
    }


/********************************************************
    functions to run the simulation in three steps.
    step0) record green: run and record voltage and synaptic currents
    step1) replay green + red input: set the voltage clamp
        and use it to replay nodes activated for red input.
    step2) replay + no input: as step 1 but no inputs
    step3) replay+ green input: as step 2 but with green inputs
********************************************************/ 
    STEPS = 6
    OBSERVED_CELL = 4
	objref vclamp_recordings[N]
	objref vneuron_recordings[N]
    objref input_node_recordings[Ni]
    objref net_syn_recordings[N]
    
  	objref list_vneuron_recordings[STEPS]
	objref list_vclamp_recordings[STEPS]
    objref list_input_nodes_recordings[STEPS]
    objref list_net_syn_recordings[STEPS]
    objref vneuron_replay[N]
	objref voltage_clamp


    proc set_replay(){local i localobj vc
        for i=0,N-1 {
            neuron[i] vc = append_voltage_clamp(voltage_clamp)
            vneuron_replay[i] = vneuron_recordings[i].c
            vneuron_replay[i].play(&vc.amp1,dt) // replay recorded activity to the voltage_clamp
            vclamp_recordings[i].record(&vc.i,dt) // record the current generated by the voltage_clamp during the replay.
        }
    }

    proc set_record(){local i
        for j=0,Ni-1 input_node_recordings[j].record(&input_node_list[j].o(OBSERVED_CELL).i)
        for i=0,N-1 vneuron_recordings[i].record(&neuron[i].v(0.5),dt)
        for i=0,N-1 net_syn_recordings[i].record(&syn_list.o(i).i,dt)
    }

    proc init_objects(){
        for i=0,STEPS-1 list_vneuron_recordings[i] = new List()
        for i=0,STEPS-1 list_vclamp_recordings[i] = new List()
        for i=0,STEPS-1 list_input_nodes_recordings[i] = new List()
        for i=0,STEPS-1 list_net_syn_recordings[i] = new List()

        voltage_clamp = new List()

        for i=0,N-1 vclamp_recordings[i] = new Vector()
        for i=0,N-1 vneuron_recordings[i] = new Vector()	
        for i=0,N-1 net_syn_recordings[i] = new Vector()	
        
        // only the inputs for a single cell.
        for i=0,Ni-1 input_node_recordings[i] = new Vector()	
    }


    proc append_vector_to_lists(){local step
        step = $1
        for i=0,N-1 list_vclamp_recordings[step].append(vclamp_recordings[i].c)
        for i=0,N-1 list_vneuron_recordings[step].append(vneuron_recordings[i].c)
        for i=0,N-1 list_net_syn_recordings[step].append(net_syn_recordings[i].c)
        for j=0,Ni-1 list_input_nodes_recordings[step].append(input_node_recordings[j].c)
    }

	step_num = -1
    proc show_to_subject(){local hue
        hue = $1
        sensor_set_input_layer(hue)
        run()
        append_vector_to_lists(step_num+=1)
    }

    proc run_all(){
        init_objects()
        set_record() 
        show_to_subject(RED)
        show_to_subject(BLUE)
        show_to_subject(GREEN)
        set_replay() //right after green set the recorded traces to green
        show_to_subject(RED)
        show_to_subject(NOTHING)
        show_to_subject(GREEN)
    }
	
	
	/*********************************************************
        plots
    **********************************************************/
    objref gg
    gg = new Graph()
	proc plot_results(){localobj graph
        graph = gg
		graph.label($s1)
		//for i=0,N-1 if (i!=OBSERVED_CELL) $o2.o(i).line(graph,dt,$5,1)
        $o2.o(OBSERVED_CELL).line(graph,dt,$5,2)
		//graph.view(0, 1, 0, 1, 100, 500, 500,100)
        //graph.exec_menu ("View=plot")
		append_scale_bar(graph,$3,$4)
	}

	objref graph_recorded_activity
	objref graph_replayed_activity
    objref graph_network_synaptic_activity
    objref graph_recorded_replayed_diff,diff
	objref graph_all_steps,plot_all_steps

    objref graph_plot_all_steps_net_syns,plot_all_steps_net_syns

    objref vec_green, vec_red, vec_blue
    objref vec_input_node[Ni]
    objref vec_red_vclamp,vec_nothing_vclamp,vec_green_vclamp
    objref gcompare
    proc plot_all(){local step
        //plot all the colors on one graph.
        plot_results("recorded activit BLUE",list_vneuron_recordings[0],100,10,2)
        plot_results("recorded activity RED",list_vneuron_recordings[1],100,10,3)        
        plot_results("recorded activity GREEN",list_vneuron_recordings[2],100,10,4)        
        
        //get the synaptic activity for the input nodes for the different colors
        vec_red = list_input_nodes_recordings[step=2].o(0).c.mul(-1) 
        vec_blue = list_input_nodes_recordings[step=2].o(1).c.mul(-1)
        vec_green = vec_red.c.add(vec_blue)
         //the voltage clamp during replaying green for red input
        vec_red_vclamp = list_vclamp_recordings[step=3].o(OBSERVED_CELL).c
        vec_nothing_vclamp = list_vclamp_recordings[step=4].o(OBSERVED_CELL).c
        vec_green_vclamp = list_vclamp_recordings[step=5].o(OBSERVED_CELL).c
        
        gcompare = new Graph(0)
        vec_red_vclamp.c.add(0.1).line(gcompare,dt,3,1)
        vec_blue.line(gcompare,dt,2,6)

        vec_nothing_vclamp.c.add(0.1).line(gcompare,dt,1,1)
        vec_green.line(gcompare,dt,4,6)

        vec_green_vclamp.c.add(0.1).line(gcompare,dt,4,1)

        
        append_scale_bar(gcompare,100,0.5)
	    gcompare.view(0, 1, 0, 1, 100, 500, 500,100)
		gcompare.label("red replay vs blue input")


        //just do one recording of OBSERVED_CELL (#4) synaptic current for one  the steps, all of them look exactly the same.
        // plot_results("recurrent network synaptic currents", list_net_syn_recordings[2],100,10,1)
        // plot_results("voltage clamp during RED", list_vclamp_recordings[3],100,1,2)
        // plot_results("voltage clamp during NOTHING", list_vclamp_recordings[4],100,1,1)        
        // plot_results("voltage clamp during GREEN", list_vclamp_recordings[5],100,1,4)    
    }


	/*
    * finally, get things going
    *******************************************************
    */


    run_all()
    plot_all()
    
	