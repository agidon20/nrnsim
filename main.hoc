// Load necessary modules
load_file("nrngui.hoc")
nrn_load_dll("../nrnlib/_mod/nrnmech.dll")
load_file("../nrnlib/_classlib/TColorMap.hoc")
// Define simulation parameters
N = 30
BASE_RANDOM_SEED = 123123
FEEDFORWARD_RATE = 20
FEEDFORWARD_DELAY = 20
P_RELEASE = 0.8
P_CONNECTION = 1
LEARNING_RATE = 0.05
IE_RATIO = 0.7
TYPE_EX = 4
TYPE_IN = 0
objref NULL

objref syn_feedforward[N]
objref tplay_inputs[N]
objref spike_counter[N]
double ie_type[N]

objref syn_feedback[N][N]
objref tplay_output[N][N]
objref netcon[N][N]

double release[N][N]
double weights[N][N]

objref global_random_obj


create grid[N][N] //for plotting
objref shapeWindow



create cells[N]

proc init_simul_prop(){
    for i=0, N-1 for j=0, N-1 weights[i][j] = 0.5
    steps_per_ms = 10
    tstop = 500      // Simulation duration (ms) several parameters depend on that so start with it.
    last_spike_count_ex = 0
    current_spike_count_ex = 0
    last_spike_count_in = 0
    current_spike_count_in = 0    
}

/*
    Util function: just create a time series for synaptic activity
*/
obfunc create_tplay(){local x,i,Hz,delay localobj tplay,rnd
	Hz = $1
    delay = $2
	rnd = get_random_obj()
    //assign four times the nuber of extepcted spike per second to be safe
    tplay = new Vector(Hz * 1000 / tstop * 4) 
    rnd.negexp(1/Hz * 1000)
    tplay.setrand(rnd)
    tplay.integral().add(delay)
    return tplay
}

obfunc get_random_obj(){
    if(global_random_obj == NULL){
        global_random_obj = new Random(BASE_RANDOM_SEED)
        print "Allocating new random object"
    }
    return global_random_obj
}


create grid
objref grid_section_list
objref grid_shape_plot
objref grid_color_map
proc init_plot_weights(){
    grid grid_section_list = new SectionList()
    grid_shape_plot = new PlotShape(grid_section_list)
    
    grid_color_map = new TColorMap("../nrnlib/_classlib/cm/jet.cm",grid_shape_plot) 
    grid_shape_plot.scale(0,4)
    for i=0,N-1 {
        grid_shape_plot.hinton(&ie_type[i], i/N, -1/N, 1/N)
        grid_shape_plot.hinton(&ie_type[i], -1/N, i/N, 1/N)
        for j=0,N-1 {
            if(syn_feedback[i][j] != NULL){
                grid_shape_plot.hinton(&weights[i][j], i/N, j/N, 1/N)
            }
        }
    }
    grid_shape_plot.size(-.5, 1, 0, 1)
    grid_shape_plot.exec_menu("Shape Plot")
}


/*
    Here I create a network of 4 neurons, two excitatory and two inhibitory.
    The inhibitory and the excitatory neurons can fire APs 
*/
proc init_cells_byioph(){
    for i=0,N-1 cells[i] {
        // Passive properties
        Ra = 100      // Axial resistance (ohm*cm)
        cm = 1        // Membrane capacitance (uF/cm^2)
        L = 10        // Length (um)
        diam = 10     // Diameter (um)
        nseg = 1      // Number of segments
        // Initialize to resting potential
        v = -65       // Membrane potential (mV)
        insert traub  // Passive current
        spike_counter[i] = new APCount(0.5)
        spike_counter[i].thresh = -10
    }
}

proc init_ie_type(){localobj rnd
    rnd = get_random_obj()
    rnd.uniform(0,1)    
    for i=0, N-1{
        ie_type[i] = 4*(rnd.repick() < IE_RATIO)
    }
    
}

/*every cell has inputs coomming from the outside world. 
It is a feedforward connection. Only the excitatory neurons
recieve this input and they try to play a gain where theylearn to 
inhibit one another to get minimal input*/
proc init_feedforward(){localobj syn
    for i=0, N-1 if(ie_type[i] == TYPE_EX) cells[i]{
        syn = new mySyn(0.5) //put the synapse on the post cell.
        syn.gmax = 0.1e-3 //uS
        syn.tau_r = 0.5
        syn.tau_d = 20
        syn.mg = 0
        syn.e = 0
        tplay_inputs[i] = create_tplay(FEEDFORWARD_RATE,FEEDFORWARD_DELAY)
        syn.play( tplay_inputs[i])
        syn_feedforward[i] = syn
    }
}

proc set_synaptic_release(){local i,j localobj rnd
    rnd = get_random_obj()
    rnd.uniform(0,1)
    for i=0, N-1{
        for j=0, N-1{
            release[i][j] = (rnd.repick() < P_RELEASE)
        }
    }
}

proc set_synaptic_conductance(){local i,j localobj syn
    //presynaptic neuron i 
    for i=0, N-1 {
        for j=0, N-1{
            syn = syn_feedback[i][j]
            if(syn != NULL){
                if(ie_type[i] == TYPE_EX) syn.gmax = 0.05e-3*release[i][j]*weights[i][j] //uS
                if(ie_type[i] == TYPE_IN) syn.gmax = 0.5e-3*release[i][j]*weights[i][j] //uS                
            }
        }
    }
}

proc learn(){local i,j,dW,success,fail,weights_sum,ws localobj rnd
    //if spikes became smaller than change the synaptic weights.
    success = last_spike_count_ex - current_spike_count_ex
    dW = 2*(success >= 0) - 1
    dW = LEARNING_RATE * dW
    weights_sum = 0
    for i=0, N-1{
        for j=0, N-1{
            if(syn_feedback[i][j] != NULL){
                fail = 1 - release[i][j] 
                weights[i][j] += ( dW * release[i][j]   )
                if(weights[i][j]<0) weights[i][j] = 0
                if(weights[i][j]>10) weights[i][j] = 10
                weights_sum += weights[i][j]
                //weights[i][j] -= ( dW * fail   )
            }
        }
    }
    //normalization
    ws = 0
  //  for i=0, N-1 for j=0, N-1  if(syn_feedback[i][j] != NULL) weights[i][j] *=   initial_weight_sum/weights_sum
    for i=0, N-1 for j=0, N-1  if(syn_feedback[i][j] != NULL) ws += weights[i][j] 
    print "current weights sum is:", ws
}

proc init_feedback(){local i,j localobj syn,connection_probability
    connection_probability = get_random_obj()
    connection_probability.uniform(0,1)
    //presynaptic neuron i 
    for i=0, N-1 cells[i]{
        //post synaptic input j
        for j=0, N-1{
            if (i != j){
               // if( ie_type[i] == TYPE_EX || ie_type[j] == TYPE_EX){ //no IN to IN connections
                    if(connection_probability.repick() < P_CONNECTION){
                        cells[j] syn = new mySyn(0.5) //put the synapse on the post cell j.
                        syn.gmax = 0
                        syn.tau_r = 0.5
                        syn.tau_d = 10
                        syn.mg = 0
                        if(ie_type[i] == TYPE_EX) syn.e = 0
                        if(ie_type[i] == TYPE_IN) syn.e = -80
                        // Neuron cannot synapse onto itself, that synapse is used for the stim input
                        netcon[i][j] = new NetCon(&cells[i].v(0.5), syn, 0, 1, 1)
                        syn_feedback[i][j] = syn
                    }
               // }
            }else{
                weights[i][j] = -1e10
            }
        }
    }
    initial_weight_sum = 0
    for i=0, N-1 for j=0, N-1 {
        if(syn_feedback[i][j] != NULL){
            initial_weight_sum += weights[i][j]
        }
    }
}



proc count_spikes(){local i
    last_spike_count_in = current_spike_count_in
    last_spike_count_ex = current_spike_count_ex
    current_spike_count_in = 0
    current_spike_count_ex = 0
    for i=0,N-1 if(ie_type[i] == TYPE_EX) current_spike_count_ex+=spike_counter[i].n
    for i=0,N-1 if(ie_type[i] == TYPE_IN) current_spike_count_in+=spike_counter[i].n
    print "Excitatory spikes " , current_spike_count_ex , " spikes"
    print "Inhibitory spikes " , current_spike_count_in , " spikes"
}

objref g,gs, gs_vec_ex,gs_vec_in
strdef s
proc init_plot_voltage(){local i
    gs_vec_ex  = new Vector(10002,0)
    gs_vec_in  = new Vector(10002,0)
    newPlotV()
    g = graphItem   
    for i=0, N-1 {
        sprint(s,"retions[%d].v(0.5)",i)
        cells[i] g.addvar(s, &v(0.5), 2+ (ie_type[i] == TYPE_EX),1)
    }
    gs = new Graph()
    gs_vec_in.plot(gs,2,1)
    gs_vec_ex.plot(gs,3,1)
    gs.exec_menu("View = plot")
}

proc update_plots(){
        gs_vec_ex.x[$1] = current_spike_count_ex
        gs_vec_in.x[$1] = current_spike_count_in
        gs.flush()
        grid_shape_plot.flush()
}

// Graphs for displaying voltage
proc main(){local jj
    init_simul_prop()
    init_cells_byioph()
    init_ie_type()
    init_feedforward()
    init_feedback()
    init_plot_weights()
    init_plot_voltage()
    run()
    count_spikes()
    for jj=0,10000{
        set_synaptic_release()
        set_synaptic_conductance()
        run()
        count_spikes()
        learn()
        update_plots(jj)
    }
}

main()
