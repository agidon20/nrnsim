begintemplate permut
	public perm,bin, next, printbin,n, r,scan,plot,printperm,plotbin,contacts
	double perm[1], bin[1], syn[1]

proc init(){local i
	n = $1 //number of slots
	r = $2 //number of synapses
	double perm[r], bin[n], syn[n]
	//set the first permutation
	for i=0,r-1 perm[i] = 0
	for i=0,n-1 bin[i] = 0
	for i=0,r-1 bin[perm[i]] += 1
	
}

func next(){local i,j,f
	contacts = f = 0
	for (i=r-1;i>=0;i-=1)  {
		if (perm[i]<n-1){//-r+i) { 
			f = 1 
			break
		}
	}
	perm[i] += f //do not add 1 at the last iteration
	for j=i+1,r-1 perm[j] = perm[j-1]
	for i=0,n-1 bin[i] = 0
	for i=0,r-1 bin[perm[i]] += 1
	for i=0,n-1 contacts += (bin[i] > 0)
	
	return f==1 //return fase for the last permutation, for usage with while
}


//some output functions

proc plot(){localobj x
	x = new Vector()
	x.from_double(n,&syn)
	x.div(x.sum).line($o1)
	$o1.exec_menu("View = plot")
	$o1.exec_menu("10% Zoom out")	
}

proc plotbin(){local k,i localobj x
	if(numarg()>1) for i=2,numarg() bin[i-2] = $i
	x = new Vector(n)
	for k = 0,n-1 for i=0,n-1 x.x[i] += (bin[k]*exp(-abs(i-k)/lambda))
	x.line($o1)
	$o1.exec_menu("View = plot")
	$o1.exec_menu("10% Zoom out")	
}

proc printbin(){local i
	if($1){
		for i=0,n-1 printf("%d",bin[i])
		print ""
	}
}

proc printsyn(){local i
	if($1){
		for i=0,n-1 printf("%d",syn[i])
		print ""
	}
}

proc printperm(){local i
	if($1){
		for i=0,r-1 printf("%d          ",perm[i])
		print ""
	}
}
endtemplate permut




