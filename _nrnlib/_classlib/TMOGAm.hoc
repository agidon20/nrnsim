D__TMOGA = 1
load_file("TMOErr.hoc","D__TMOERRHOC")
load_file("TString.hoc","D__TSTRINGHOC")
load_file("TDiagn.hoc","D__TDIAGNHOC")


//whenever a new best point (solution) is encountered rais this event
proc IGANewElite(/*list_of_gnm,list_of_err*/){
	diagn(D_LEVEL_ERROR,"proc IGANewElite","***GA ERROR: IGANewElite procedure is not overrided!","",NULL)
}

objref global_vec_ //vector to return the error from the error function becuase the error function is global
begintemplate TMOGA

		external IGANewElite,global_vec_
		external D_LEVEL_ASSERT,NULL,diagn
		
		objref elite_genome[1]		//genome of every organizm
		objref genome[1]	//tng = the next generation genomes
		objref tng_genome[1]
		objref elite_genome[1]
		

		objref elite_error[1] 				//error matrix (organism i error is in error.getcol(i))
		objref error[1]
		objref elite_error[1]
		
		objref range,rmin,rmax
		objref params				//pointers to the parameters to optimize
		objref rnd					//only one random gen, so there is only one seed
		objref moe					//multi-objective-error object
		objref this
		objref pc					//parallelcontext
		objref exec_list
		objref flst,fparamlst
		objref file
		strdef cmd
		strdef resdir

		public evolution,init_ga,assign,append,popsize,mutation_p,cross_p
		public seed,tourn_size,append_err_func,pc,params,exec_list,output
		public error,genome,elite_error,elite_error
		public vwritegnm,vreadgnm,err_setup,endoftime,sigma_share
		public resdir,ndsize,total_genes,generations


		proc init(){
			BIG_NUMBER = 1e80
			DISC = 60
			pc = new ParallelContext()
			popsize = pc.nhost*2		//scale the population size with the number of processes available
			mutation_p = 0.3 	//probability for each gene to undergo a mutation
			cross_p = 0.3
			tourn_size = 2	//size of the trournament -  see trournament function
			seed = 451	//specifically set the seed	
			pop_error = BIG_NUMBER	//the minimal (among all orgs)  maximal (in the multi-objective error
			endoftime = BIG_NUMBER	//endless...
			ndsize = 0	//number of non-dominated orgs after each generation

			sigma_share = 0 //this number should be revised acourding to the number
					//of objective, enforcing variability and so on. zero means no sharing
			total_genes = 0
			resdir = "res" //default results directory

			rmin = new Vector()
			rmax = new Vector()
			range = new Vector()
			params = new List()
			flst = new List()			
			fparamlst = new List()
			moe  = new TMOErr()
			exec_list = new List()
			file = new File()
			NONE_DOMINATED = TRUE = 1
			DOMINATED = FALSE = 0
			
			t_evolve = 0 
			t_share = 0 
			t_merge = 0
			t_run = 0
		}


/*
	add as many parameters as you like
	$s1 - the optimized parameter name
	$2 - its minimal value
	$3 - maximal value
*/
		proc append(){
			rmin.append($2)
			rmax.append($3)
			range.append($3-$2)
			params.append(new Pointer($s1))
			if(numarg()>3) exec_list.append(new TString($s4))
		}


/*
	If more then one error function is required for each organizm then add them on the list.
	currently each one of the organisms has identical set of functions. 
	$s1 - error function name - only functions that were already declared.
	$s2 - argument list in a string "arg1,arg2,arg3". Any argument is possible since the user 
		is responsible for retrieving them.

*/

		proc append_err_func(){localobj s
			if(name_declared($s1)){
				flst.append(new TString($s1))
				// parameters list look like "a,b,c"
				// no error checking is done for now.
				s = new TString("")
				if(numarg()>1) s.append(",").append($s2) //the first comma is for the gemone id
				fparamlst.append(s)

			}else{
				diagn(D_LEVEL_ASSERT,"func append_err_func","***GA ASSERT: you tried to add none existing function to the error function list","",NULL)
			}
		}


/*
	we allso need a "init_ga" for all the parameters that need to be set 
	after "append" was used
*/
		proc init_ga(){local org,k,gene
			if(flst.count==0) diagn(D_LEVEL_ASSERT,"func init_ga","***GA ASSERT: at least one error function must be declared.","",NULL)
			ndsize = 0	//number of non-dominated orgs after each generation
			pop_error = BIG_NUMBER	//the minimal (among all orgs)  maximal (in the multi-objective error
			gc = params.count
			objref elite_genome[popsize],genome[popsize],tng_genome[popsize],elite_genome[popsize]
			objref elite_error[popsize],error[popsize],elite_error[popsize]
			//note that this is the first and only time this object 
			//is initialized so simulations could be repeated
			rnd = new Random(seed) 			
			rnd.uniform(0,1)
			for org=0,popsize-1 elite_genome[org] =  new Vector(gc)
			for org=0,popsize-1 genome[org] =  new Vector(gc)
			for org=0,popsize-1 tng_genome[org] =  new Vector(gc)
			
			for org=0,popsize-1 elite_error[org] =  new Vector()
			for org=0,popsize-1 error[org] =  new Vector()

			for org=0,popsize-1 genome[org].fill(0.5)//setrand(rnd)
			//~ for org=0,popsize-1 normaliz_genome(genome[org])
			
		}

		
	proc normaliz_genome(){local sum,gene localobj gnm
		gnm = $o1
		sum = gnm.sum
		gnm.div(sum)
		gnm.mul(total_genes)
	}


/*
	$o1 - genome vector to assign to parameters
*/
		proc assign(){local gene localobj gnm
			gnm = $o1
			for gene=0,gc-1 params.o(gene).val = gnm.x[gene]*range.x[gene] + rmin.x[gene]
			for i=0,exec_list.count-1 {exec_list.o(i).exec()}//after all parameters were assigned
		}


/*ndsize
	the gene to mutate is selected randomly
	$1 - the organizm id to mutate
*/
		proc mutate(){local i,gene,mut,p,val,j,mutsize localobj gnm
			gnm = genome[$1]
			val = 0
			mutsize = 0.1//exp(-5*generations/endoftime)
			if(rnd.uniform(0,1)<mutation_p){
				gene = int( rnd.uniform(0,gc) ) //select the gene to mutate
				mut = rnd.uniform(-mutsize,mutsize)*gnm.x[gene]
				//the following two lines perserve the total value of the genes
				gnm.x[gene] += mut

				normaliz_genome(gnm)
			}
		}

/*
       n individuals are selected at random and for a tournament, 
       the fittest one among the tournament are selected. The most common
	   type of tournament selection is binary tournament selection, where 
	   just two individuals are selected.
       
       Note that the tournament size is strongly linked to the objective_count, since 
      the more objectives you have it is harder to be a non-dominated organism. 
	   Here I use the rule that the tournament size is 3 times the number of the objectives.
       this works fine with up to 8 objectives (test was caried out with random error values)
       
       Note that for too much objectives it begines to become a slow process O(n^2)

*/
		func tournament(){local i localobj org,ind
			ind = new Vector(popsize)
			org = new Vector(tourn_size)
			rnd.uniform(0,1) 
			ind = ind.setrand(rnd).sortindex()//this gives unique random integers
			moe.clear
			for(i=0;i<tourn_size;i+=1) moe.append(error[ind.x[i]])//note that tunament is called after sharing!
			for(i=0;i<tourn_size;i+=1) org.x[i] = moe.dom(i)
			return ind.x[org.min_ind] //send the population wise index of the non-dominated
		}		



/*
	I treat the genome as if it was in a plasmid, then cut it somewhere randomely,
	and then do the recombination. A linear genome rather then a plasmid
	will cause two remote genes to be almost always ceperated buy the recombination e.g.:
	the following genome A-B-C-D-E-F-G-H-I, every cross over will ceperate gene A from I.
	The plasmid allows them to move on together in some of the times.
	$1 genomes id of the child parents are selected form the tournament
*/
		proc recombinate(){local recom_spot,f,m,rot localobj father,mother,child
			if(rnd.uniform(0,1) < cross_p){
				f = tournament() 
				m = tournament()
				recom_spot = int( rnd.uniform(0,gc-1) )+1//choose the spot for recombination
				rot = int( rnd.uniform(-gc+1,gc-1) ) //set the genome to be circular - select rotation point
				father = genome[f].c.rotate(rot).c(0,recom_spot-1) //cut the plasmid in a random spot
				mother = genome[m].c.rotate(rot).c(recom_spot,gc-1)//cut the plasmid in a random spot
				child = father.append(mother).rotate(-rot)//put it back to original form
				normaliz_genome(child)
				tng_genome[$1].copy(child)
			}else{ //if no recomination occures just take the best out of any two
				tng_genome[$1].copy(genome[tournament()])
			}
		}
/*
	simplest sharing function
	the error is multiplied by the niche count (a fitness is devided). Then for
	normalization divide by the total niches count (this is just for perserving the magnitude
	of the error).
*/
			
		proc share(){local i,j,nc localobj gnm
			if(sigma_share == 0) return //for single objective no need for sharing function	
			for j=0,popsize-1 {
				gnm = genome[j]
				for i=0,popsize-1 nc += (1-gnm.c.sub(genome[i]).mag/sigma_share)
				error[j].mul(nc)
			}
		}
		



/*
	evolve is executed after getting the error and sorting the non-dominated list
*/
		proc evolve(){local i,k
			for i=0,popsize-1	mutate(i) //in random gene
			for i=0,popsize-1	recombinate(i)//to give birth to child i
			for i=0,popsize-1	genome[i].copy(tng_genome[i])//to give birth to child i
		}

		
		proc merge(){local pe,j,i localobj ndind,g,tmp
			g = new List() //list of old and new genomes
			tmp = new Vector()
			//note that it is important that while this is execute,
			// all the slaves will ne idle.
			ndind = new Vector(popsize+ndsize,0)//the old non-dominated plus all the new generation
			moe.clear//starting from scratch

			//copy all the objects from tos and tng to a unified list
			for i=0,popsize-1 { moe.append(error[i].c) g.append(genome[i].c)}
			for i=0,ndsize-1 { moe.append(elite_error[i].c) g.append(elite_genome[i].c)}
			
			//if the organism is dominated, put in another value to sort by
			//sum of errors would be irrelevant to use in this case.
			
			for i=0,popsize+ndsize-1 ndind.x[i] = moe.dom(i)
			
			ndind.indvwhere("==",0) //index of all the non-dominated organisms
			ndsize = ndind.size //the new ndsize
			if(ndsize>=popsize) {
				ndsize = popsize //take all the population, which is smaller than ndsize
				warn("WARNING: non-dominated + elite > population - there is degradation in pareto front\n")
			}

			for i=0, ndsize-1{
				elite_error[i].copy(moe.o(ndind.x[i]))				
				elite_genome[i].copy(g.o(ndind.x[i]))
			}


			{pe = 0} for i=0,ndsize-1 pe += elite_error[i].sum
			{mine = BIG_NUMBER} for i=0,ndsize-1 if(mine > elite_error[i].sum) mine = elite_error[i].sum
			//if the total error of the pareto front is changed, then we have a better one and hence
			//new elite even t is raised
			if(pop_error!=pe){
				pop_error = pe
				IGANewElite(generations,pop_error) 
			}
		}

		

	/* this is the first time an error vector is returned, therefore, I can 
	setup all the error - essentialy their size*/

		func err_setup(/*error*/){local org
			objective_count = $1
			for org=0,popsize-1 error[org].resize(objective_count)
			for org=0,popsize-1 elite_error[org].resize(objective_count)
			for org=0,popsize-1 elite_error[org].fill(BIG_NUMBER) //initial error is big here
			return TRUE
		}


/*
	actualy run the simulation (or whatever) and post the error.
	peval is the parallel version of this function.
	$o1 - genome vector, $2 - the number of the function from the error functino
	list to use (flst)
*/
		func peval(){local key localobj vec
			key = $3
			assign($o1)
			sprint(cmd,"global_vec_ = %s(%d%s)",flst.o($2).s,key,fparamlst.o($2).s)
			execute(cmd) //execute global
			pc.post(key,global_vec_)
			return key
		}
		
		
/* evolution, where everything is wrapped */
		proc evolution(){local id,l,j,i,err_setup_flag,org,key localobj e
			init_ga()
			if(numarg()>0) vreadgnm($s1)
			pc.runworker() 
			err_setup_flag = FALSE
			for (generations=0;generations<endoftime;generations+=1){
				startsw()
				stopsw()//note that this is the first and only time this object is initialize
				for (i=0;i<popsize;i+=1) {//in the first run elite_count = 0
					error[i].fill(0) //make sure that the error is 0
					for(j=0;j<flst.count;j+=1) pc.submit(this,"peval",genome[i],j,i) 
				}
				while((id=pc.working)>0) {
					key = pc.retval
					pc.take(key)
					e = pc.upkvec
					if(!err_setup_flag) err_setup_flag = err_setup(e.size)
					error[key].add(e)
				} t_run = stopsw()
				
				stopsw() share() t_share = stopsw()
				stopsw() merge() t_merge = stopsw()
				logfile(1)
				
				//this is essentially the first stage of the process, 
				stopsw() evolve() t_evolve = stopsw()

			}
			pc.done
		}
		
		
		//---------------------------------------------------------------------------------------------------------------------------------
		//from here on it is IO functions and debugging
		proc logfile(){
			if(numarg()>0){
				printf("tng=%d, nd=%d, err=%f mine=%f \n",generations,ndsize,pop_error,mine)
				printf("run=%f, merge=%f, share=%f, evolve=%f \n",t_run,t_merge,t_share,t_evolve)
			}else{
				sprint(cmd,"%s/log",resdir)
				file.aopen(cmd)
				file.printf("tng=%d, nd=%d, err=%f",generations,ndsize,pop_error)
				file.printf("run=%f, merge=%f, share=%f, evolve=%f \n",t_run,t_merge,t_share,t_evolve)
				file.close()
			}
		}
		
		proc warn(){
			sprint(cmd,"%s/warn",resdir)
			file.aopen(cmd)
			file.printf($s1)
			file.close()
		}
		
		proc output(){local i localobj gv,gnm
			if(argtype(1)==0) gnm = genome[$1]
			if(argtype(1)==1) gnm = $o1
			gv = new Vector()
			for i=0,gc-1 gv.append( gnm.x[i]*range.x[i] + rmin.x[i] )
			if(numarg()<2) {
				for i=0,params.count-1 printf("%s = %.25g\n", params.o(i).s, gv.x[i])
				for i=0,exec_list.count-1 print exec_list.o(i).s
			}else{
				for i=0,params.count-1 $o2.printf("%s = %.25g\n",params.o(i).s, gv.x[i])
				for i=0,exec_list.count-1 $o2.printf("%s\n",exec_list.o(i).s)//after all parameters were assigned
			}
		}
		
		proc vwritegnm(){local i localobj file,popgnm
			file = new File($s1)
			popgnm = new Vector()
			popgnm.buffer_size(gc*ndsize+2)
			popgnm.append(ndsize)
			for i=0,ndsize-1 popgnm.append(elite_genome[i])
			file.wopen()
			popgnm.vwrite(file)
			file.close()
		}
		
		
		proc vreadgnm(){local i localobj file,popgnm
			file = new File($s1)
			file.ropen()
			popgnm = new Vector()
			popgnm.vread(file)
			ndsize = popgnm.x[0]
			popgnm.remove(0)
			for i=0,ndsize-1 genome[i].copy(popgnm,i*gc,(i+1)*gc-1)
			file.close()			
		}

		
		
endtemplate TMOGA
